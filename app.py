from flask import Flask, render_template, redirect, url_for, flash, request
from flask_sqlalchemy import SQLAlchemy
from forms import RegisterForm, LoginForm, ReportForm, RiskAssessmentForm
from flask_bcrypt import Bcrypt
from flask_login import LoginManager, login_user, logout_user, login_required, current_user
from models import User, Report, RiskAssessment, db

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///pentest_tool.db'
app.config['SECRET_KEY'] = 'pentesting_secret_key'
db.init_app(app)
bcrypt = Bcrypt(app)
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    form = RegisterForm()
    if form.validate_on_submit():
        hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        new_user = User(username=form.username.data, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()
        flash('Registration successful! Please log in.', 'success')
        return redirect(url_for('login'))
    return render_template('register.html', form=form)

@app.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        if user and bcrypt.check_password_hash(user.password, form.password.data):
            login_user(user)
            return redirect(url_for('dashboard'))
        flash('Login unsuccessful. Please check your username and password.', 'danger')
    return render_template('login.html', form=form)

@app.route('/dashboard')
@login_required
def dashboard():
    return render_template('dashboard.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out.', 'info')
    return redirect(url_for('index'))

@app.route('/add_report', methods=['GET', 'POST'])
@login_required
def add_report():
    form = ReportForm()
    if form.validate_on_submit():
        new_report = Report(user_id=current_user.id, title=form.title.data, description=form.description.data, findings=form.findings.data)
        db.session.add(new_report)
        db.session.commit()
        flash('Report added successfully!', 'success')
        return redirect(url_for('view_reports'))
    return render_template('add_report.html', form=form)

@app.route('/add_risk_assessment', methods=['GET', 'POST'])
@login_required
def add_risk_assessment():
    form = RiskAssessmentForm()
    if form.validate_on_submit():
        new_assessment = RiskAssessment(user_id=current_user.id, title=form.title.data, details=form.details.data, risks=form.risks.data)
        db.session.add(new_assessment)
        db.session.commit()
        flash('Risk assessment added successfully!', 'success')
        return redirect(url_for('view_risk_assessments'))
    return render_template('add_risk_assessment.html', form=form)

@app.route('/view_reports')
@login_required
def view_reports():
    reports = Report.query.filter_by(user_id=current_user.id).all()
    return render_template('view_reports.html', reports=reports)

@app.route('/view_risk_assessments')
@login_required
def view_risk_assessments():
    assessments = RiskAssessment.query.filter_by(user_id=current_user.id).all()
    return render_template('view_risk_assessments.html', assessments=assessments)

@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(e):
    db.session.rollback()
    return render_template('500.html'), 500

if __name__ == '__main__':
    app.run(debug=True)
